name: CD to EKS via GHCR

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: write

env:
  IMAGE_URI: ghcr.io/katzchaim/financial-management
  IMAGE_TAG_SHA: ${{ github.sha }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  K8S_NAMESPACE: prod
  DEPLOYMENT_NAME: fm-app
  CONTAINER_NAME: app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image (latest + SHA)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_URI }}:${{ env.IMAGE_TAG_SHA }}
            ${{ env.IMAGE_URI }}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}"
          kubectl version --client
          kubectl get nodes

      - name: Ensure namespace exists
        run: |
          kubectl create namespace "${K8S_NAMESPACE}" --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply k8s manifests
        run: |
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/ --validate=false

      - name: Pin image to SHA and rollout
        run: |
          kubectl set image -n "${K8S_NAMESPACE}" deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${IMAGE_URI}:${IMAGE_TAG_SHA}
          kubectl rollout status -n "${K8S_NAMESPACE}" deployment/${DEPLOYMENT_NAME} --timeout=300s
          kubectl get deploy,po -n "${K8S_NAMESPACE}" -o wide
