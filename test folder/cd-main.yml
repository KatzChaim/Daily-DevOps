name: CD main

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write  # אם תעבור ל-OIDC בהמשך

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}   # או secret
  K8S_NAMESPACE: prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image (latest + SHA)
        run: |
          set -euo pipefail
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${REPO_LC}
          docker build -t ${IMAGE}:latest Project
          docker tag  ${IMAGE}:latest ${IMAGE}:${GITHUB_SHA}
          docker push ${IMAGE}:latest
          docker push ${IMAGE}:${GITHUB_SHA}
        env:
          GITHUB_SHA: ${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}
          # לחלופין בעתיד: role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Debug identity & vars
        run: |
          aws sts get-caller-identity
          echo "AWS_REGION=${AWS_REGION}"
          echo "EKS_CLUSTER_NAME=${EKS_CLUSTER_NAME}"

      - name: Wait for EKS to be ACTIVE
        run: |
          aws eks wait cluster-active --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}"
          aws eks describe-cluster --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}" --query cluster.status

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}"
          kubectl version --client
          kubectl get nodes

      - name: Ensure namespace exists
        run: |
          kubectl create namespace "${K8S_NAMESPACE}" --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy manifests
        run: |
          kubectl apply -n "${K8S_NAMESPACE}" -f k8s/ --validate=false

      - name: Pin image & rollout
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${REPO_LC}
          kubectl -n "${K8S_NAMESPACE}" set image deploy/fm-app app=${IMAGE}:${GITHUB_SHA}
          kubectl -n "${K8S_NAMESPACE}" rollout status deploy/fm-app --timeout=300s
        env:
          GITHUB_SHA: ${{ github.sha }}
        